{"version":3,"sources":["App.module.css","components/Todo.module.css","components/NewTodo.module.css","reducers/todosSlice.js","components/Todo.js","components/NewTodo.js","components/Trash.js","components/TodoList.js","App.js","app/store.js","index.js"],"names":["module","exports","todosSlice","createSlice","name","initialState","text","checked","id","nanoid","reducers","toggleChecked","state","action","map","todo","payload","reorder","splice","sourceIndex","draggedTodo","destinationIndex","editText","add","push","remove","actions","Todo","index","dispatch","useDispatch","draggableId","provided","className","ref","innerRef","draggableProps","onClick","styles","todoText","value","onChange","changedValue","dragHandleProps","NewTodo","useState","setText","newTodoText","placeholder","onSave","Trash","droppableId","snapshot","isDraggingOver","droppableProps","TodoList","todos","useSelector","onDragEnd","source","destination","App","container","enhancer","compose","persistState","undefined","key","configureStore","reducer","todosReducer","enhancers","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.4e0d34fc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoText\":\"Todo_todoText__3dUJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newTodoText\":\"NewTodo_newTodoText__1q8zr\"};","import { createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nexport const todosSlice = createSlice({\n  name: 'todos',\n  initialState: [\n    {\n      text: 'Walk the dog',\n      checked: false,\n      id: nanoid(),\n    },\n    {\n      text: 'Wash dishes',\n      checked: false,\n      id: nanoid(),\n    },\n    {\n      text: 'Call mom',\n      checked: false,\n      id: nanoid(),\n    },\n  ],\n  reducers: {\n    toggleChecked: (state, action) => {\n      // Payload is id of todo to toggle\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          return { ...todo, checked: !todo.checked };\n        }\n        return todo;\n      });\n    },\n    reorder: (state, action) => {\n      const [draggedTodo] = state.splice(action.payload.sourceIndex, 1);\n      state.splice(action.payload.destinationIndex, 0, draggedTodo);\n    },\n    editText: (state, action) => {\n      return state.map((todo) => {\n        if (todo.id === action.payload.id) {\n          return { ...todo, text: action.payload.text };\n        }\n        return todo;\n      });\n    },\n    add: (state, action) => {\n      // Payload is text of new todo\n      state.push({\n        text: action.payload,\n        checked: false,\n        id: nanoid(),\n      });\n    },\n    remove: (state, action) => {\n      // Payload is index of todo to remove\n      state.splice(action.payload, 1);\n    },\n  },\n});\n\nexport const { toggleChecked, reorder, editText, add, remove } =\n  todosSlice.actions;\n\nexport default todosSlice.reducer;\n","import { useDispatch } from 'react-redux';\nimport { toggleChecked, editText } from '../reducers/todosSlice';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { EditText } from 'react-edit-text';\nimport 'react-edit-text/dist/index.css';\nimport styles from './Todo.module.css';\n\nconst Todo = ({ id, index, text, checked }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Draggable key={id} draggableId={id} index={index}>\n      {(provided) => (\n        <div\n          className=\"flex items-center\"\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <div className=\"pr-3\">\n            <i\n              className={`bi text-2xl ${\n                checked ? 'bi-check-square-fill' : 'bi-square'\n              }`}\n              onClick={() => dispatch(toggleChecked(id))}\n            ></i>\n          </div>\n          <div className=\"w-full\">\n            <EditText\n              className={styles.todoText}\n              value={text}\n              onChange={(changedValue) =>\n                dispatch(editText({ id, text: changedValue }))\n              }\n            />\n          </div>\n          <div>\n            <i\n              className=\"bi bi-grip-vertical\"\n              {...provided.dragHandleProps}\n            ></i>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Todo;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { add } from '../reducers/todosSlice';\nimport { EditText } from 'react-edit-text';\nimport 'react-edit-text/dist/index.css';\nimport styles from './NewTodo.module.css';\n\nconst NewTodo = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState('');\n\n  return (\n    <div className=\"flex items-center text-gray-300\">\n      <div className=\"pr-3\">\n        <i className=\"bi bi-plus-circle-fill text-2xl\"></i>\n      </div>\n      <div className=\"w-full\">\n        <EditText\n          className={styles.newTodoText}\n          placeholder=\"New Todo\"\n          value={text}\n          onChange={(changedValue) => setText(changedValue)}\n          onSave={() => {\n            dispatch(add(text));\n            setText('');\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default NewTodo;\n","import { Droppable } from 'react-beautiful-dnd';\n\nconst Trash = () => {\n  return (\n    <Droppable droppableId=\"trash\">\n      {(provided, snapshot) => (\n        <div\n          ref={provided.innerRef}\n          className={`text-center mt-10 p-2 ${\n            snapshot.isDraggingOver ? 'bg-red-200' : 'bg-gray-200'\n          }`}\n          {...provided.droppableProps}\n        >\n          <i\n            className={\n              snapshot.isDraggingOver ? '' : 'bi bi-trash-fill text-gray-500'\n            }\n          ></i>\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n};\n\nexport default Trash;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { remove, reorder } from '../reducers/todosSlice';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport Todo from './Todo';\nimport NewTodo from './NewTodo';\nimport Trash from './Trash';\n\nconst TodoList = () => {\n  const todos = useSelector((state) => state.todos);\n  const dispatch = useDispatch();\n\n  const handleDragEnd = ({ source, destination }) => {\n    if (!destination) return;\n\n    if (destination.droppableId === 'trash') {\n      dispatch(remove(source.index));\n    } else {\n      dispatch(\n        reorder({\n          sourceIndex: source.index,\n          destinationIndex: destination.index,\n        }),\n      );\n    }\n  };\n\n  return (\n    <DragDropContext onDragEnd={handleDragEnd}>\n      <Droppable droppableId=\"todos\">\n        {(provided) => (\n          <div\n            className=\"todos\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {todos.map(({ id, text, checked }, index) => (\n              <Todo\n                key={id}\n                id={id}\n                index={index}\n                text={text}\n                checked={checked}\n              />\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n      <NewTodo />\n      <Trash />\n    </DragDropContext>\n  );\n};\n\nexport default TodoList;\n","import styles from './App.module.css';\nimport TodoList from './components/TodoList';\n\nconst App = () => {\n  return (\n    <div className={`${styles.container} container mx-auto pt-4`}>\n      <header className=\"text-center mt-8 mb-6\">\n        <h1 id=\"app-title\" className=\"text-5xl\">\n          All Done\n        </h1>\n      </header>\n      <main className=\"p-4\">\n        <TodoList />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todosReducer from '../reducers/todosSlice';\nimport { compose } from 'redux';\nimport persistState from 'redux-localstorage';\n\nconst options = {\n  key: 'allDone',\n};\n\nconst enhancer = compose(persistState(undefined, options));\n\nexport default configureStore({\n  reducer: {\n    todos: todosReducer,\n  },\n  enhancers: [enhancer],\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport store from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}